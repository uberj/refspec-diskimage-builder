#!/usr/bin/env python
import urllib
import json
import subprocess
import re


API_END_POINT = 'http://169.254.169.254/openstack/'
PINNED_METADATA_API_VERSION = '2013-10-17'


def error(reason):
    # TODO, what to do here? We need to allow for testing to just shutting the
    # machines down is bad. We need a way to alert based on this.
    print reason
    print "Hit an error. Provisioning failed."
    #p = subprocess.Popen(
    #    'halt -n', shell=True, stdout=subprocess.PIPE,
    #    stderr=subprocess.STDOUT
    #)
    #for line in iter(p.stdout.readline, ''):
    #    print line,


def write_env(blob, fd, prev=[]):
    for k, v in blob.items():
        if not isinstance(v, dict):
            k = k.replace('.', '_').replace('-', '_')
            var_name = '_'.join(prev + [k]).upper()
            fd.write('export %s="%s"\n' % (var_name, re.sub('"', '\\"', str(v))))
        else:
            cur = prev + [k]
            write_env(v, fd, prev=cur)


def provision(role):
    print "Going to apply role %s" % role
    provision_command = (
        "/usr/bin/puppet apply --verbose "
        "   --hiera_config /etc/mozpuppet/hiera.yaml "
        "   --modulepath /etc/mozpuppet/modules/ "
        "   -e 'include %s'" % role
    )
    print "Running provision command:"
    print provision_command
    p = subprocess.Popen(
        provision_command, shell=True, stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT
    )
    for line in iter(p.stdout.readline, ''):
        print line,
    reason, _ = p.communicate()
    if p.returncode:
        error(reason)

sf = urllib.urlopen(API_END_POINT)
versions = sf.read().split()  # get a list of versions
if PINNED_METADATA_API_VERSION not in versions:
    print "Couldn't find the correct version (%s) in the offered versions" % (
        PINNED_METADATA_API_VERSION
    )

version = versions[-1]  # Choose the most recent version

META_DATA = 'http://169.254.169.254/openstack/%s/meta_data.json' % version
print META_DATA
sf = urllib.urlopen(META_DATA)

resp = sf.read()
try:
    j = json.loads(resp)
except ValueError:
    error("Couldn't parse JSON from metadata api.")

with open('/etc/environment', 'a+') as fd:
    try:
        write_env(j, fd)
    except Exception, e:
        error(
            "Errors writing to /etc/environment. Got error %s" % e
        )

# TODO, try sourcing the /etc/environment file to make sure bash doesn't barf

if 'meta' in j and 'role' in j['meta']:
    provision(j['meta']['role'])
else:
    error(
        "Could not introspect role from instance metadata. Make sure your "
        "heat template defines an instance's role."
    )
